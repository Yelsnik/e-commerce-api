// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Yelsnik/e-commerce-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Yelsnik/e-commerce-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCartitems mocks base method.
func (m *MockStore) CreateCartitems(arg0 context.Context, arg1 db.CreateCartitemsParams) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartitems", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartitems indicates an expected call of CreateCartitems.
func (mr *MockStoreMockRecorder) CreateCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartitems", reflect.TypeOf((*MockStore)(nil).CreateCartitems), arg0, arg1)
}

// CreateCarts mocks base method.
func (m *MockStore) CreateCarts(arg0 context.Context, arg1 db.CreateCartsParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarts indicates an expected call of CreateCarts.
func (mr *MockStoreMockRecorder) CreateCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarts", reflect.TypeOf((*MockStore)(nil).CreateCarts), arg0, arg1)
}

// CreateImages mocks base method.
func (m *MockStore) CreateImages(arg0 context.Context, arg1 db.CreateImagesParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImages", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImages indicates an expected call of CreateImages.
func (mr *MockStoreMockRecorder) CreateImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImages", reflect.TypeOf((*MockStore)(nil).CreateImages), arg0, arg1)
}

// CreateProducts mocks base method.
func (m *MockStore) CreateProducts(arg0 context.Context, arg1 db.CreateProductsParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockStoreMockRecorder) CreateProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockStore)(nil).CreateProducts), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteProducts mocks base method.
func (m *MockStore) DeleteProducts(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockStoreMockRecorder) DeleteProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockStore)(nil).DeleteProducts), arg0, arg1)
}

// GetCartitems mocks base method.
func (m *MockStore) GetCartitems(arg0 context.Context, arg1 uuid.UUID) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartitems", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartitems indicates an expected call of GetCartitems.
func (mr *MockStoreMockRecorder) GetCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartitems", reflect.TypeOf((*MockStore)(nil).GetCartitems), arg0, arg1)
}

// GetCarts mocks base method.
func (m *MockStore) GetCarts(arg0 context.Context, arg1 uuid.UUID) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarts indicates an expected call of GetCarts.
func (mr *MockStoreMockRecorder) GetCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarts", reflect.TypeOf((*MockStore)(nil).GetCarts), arg0, arg1)
}

// GetImages mocks base method.
func (m *MockStore) GetImages(arg0 context.Context, arg1 uuid.UUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockStoreMockRecorder) GetImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockStore)(nil).GetImages), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockStore) GetProducts(arg0 context.Context, arg1 uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockStoreMockRecorder) GetProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockStore)(nil).GetProducts), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// ListCartitems mocks base method.
func (m *MockStore) ListCartitems(arg0 context.Context, arg1 db.ListCartitemsParams) ([]db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartitems", arg0, arg1)
	ret0, _ := ret[0].([]db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartitems indicates an expected call of ListCartitems.
func (mr *MockStoreMockRecorder) ListCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartitems", reflect.TypeOf((*MockStore)(nil).ListCartitems), arg0, arg1)
}

// ListImages mocks base method.
func (m *MockStore) ListImages(arg0 context.Context, arg1 db.ListImagesParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockStoreMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockStore)(nil).ListImages), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// UpdateCartitems mocks base method.
func (m *MockStore) UpdateCartitems(arg0 context.Context, arg1 db.UpdateCartitemsParams) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartitems", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartitems indicates an expected call of UpdateCartitems.
func (mr *MockStoreMockRecorder) UpdateCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartitems", reflect.TypeOf((*MockStore)(nil).UpdateCartitems), arg0, arg1)
}

// UpdateCarts mocks base method.
func (m *MockStore) UpdateCarts(arg0 context.Context, arg1 db.UpdateCartsParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarts indicates an expected call of UpdateCarts.
func (mr *MockStoreMockRecorder) UpdateCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarts", reflect.TypeOf((*MockStore)(nil).UpdateCarts), arg0, arg1)
}

// UpdateProducts mocks base method.
func (m *MockStore) UpdateProducts(arg0 context.Context, arg1 db.UpdateProductsParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockStoreMockRecorder) UpdateProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockStore)(nil).UpdateProducts), arg0, arg1)
}

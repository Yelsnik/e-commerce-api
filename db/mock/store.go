// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Yelsnik/e-commerce-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Yelsnik/e-commerce-api/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddSubtotalPrice mocks base method.
func (m *MockStore) AddSubtotalPrice(arg0 context.Context, arg1 uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubtotalPrice", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubtotalPrice indicates an expected call of AddSubtotalPrice.
func (mr *MockStoreMockRecorder) AddSubtotalPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubtotalPrice", reflect.TypeOf((*MockStore)(nil).AddSubtotalPrice), arg0, arg1)
}

// AddToCartTx mocks base method.
func (m *MockStore) AddToCartTx(arg0 context.Context, arg1 db.CreateCartitemsParams) (db.CartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCartTx", arg0, arg1)
	ret0, _ := ret[0].(db.CartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCartTx indicates an expected call of AddToCartTx.
func (mr *MockStoreMockRecorder) AddToCartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCartTx", reflect.TypeOf((*MockStore)(nil).AddToCartTx), arg0, arg1)
}

// CreateCartitems mocks base method.
func (m *MockStore) CreateCartitems(arg0 context.Context, arg1 db.CreateCartitemsParams) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartitems", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartitems indicates an expected call of CreateCartitems.
func (mr *MockStoreMockRecorder) CreateCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartitems", reflect.TypeOf((*MockStore)(nil).CreateCartitems), arg0, arg1)
}

// CreateCarts mocks base method.
func (m *MockStore) CreateCarts(arg0 context.Context, arg1 db.CreateCartsParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarts indicates an expected call of CreateCarts.
func (mr *MockStoreMockRecorder) CreateCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarts", reflect.TypeOf((*MockStore)(nil).CreateCarts), arg0, arg1)
}

// CreateImages mocks base method.
func (m *MockStore) CreateImages(arg0 context.Context, arg1 db.CreateImagesParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImages", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImages indicates an expected call of CreateImages.
func (mr *MockStoreMockRecorder) CreateImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImages", reflect.TypeOf((*MockStore)(nil).CreateImages), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 db.OrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1, arg2, arg3)
}

// CreateOrderitems mocks base method.
func (m *MockStore) CreateOrderitems(arg0 context.Context, arg1 db.CreateOrderitemsParams) (db.Orderitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderitems", arg0, arg1)
	ret0, _ := ret[0].(db.Orderitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderitems indicates an expected call of CreateOrderitems.
func (mr *MockStoreMockRecorder) CreateOrderitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderitems", reflect.TypeOf((*MockStore)(nil).CreateOrderitems), arg0, arg1)
}

// CreateOrders mocks base method.
func (m *MockStore) CreateOrders(arg0 context.Context, arg1 db.CreateOrdersParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockStoreMockRecorder) CreateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockStore)(nil).CreateOrders), arg0, arg1)
}

// CreatePayments mocks base method.
func (m *MockStore) CreatePayments(arg0 context.Context, arg1 db.CreatePaymentsParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayments", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayments indicates an expected call of CreatePayments.
func (mr *MockStoreMockRecorder) CreatePayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayments", reflect.TypeOf((*MockStore)(nil).CreatePayments), arg0, arg1)
}

// CreateProducts mocks base method.
func (m *MockStore) CreateProducts(arg0 context.Context, arg1 db.CreateProductsParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockStoreMockRecorder) CreateProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockStore)(nil).CreateProducts), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCartitems mocks base method.
func (m *MockStore) DeleteCartitems(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartitems", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartitems indicates an expected call of DeleteCartitems.
func (mr *MockStoreMockRecorder) DeleteCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartitems", reflect.TypeOf((*MockStore)(nil).DeleteCartitems), arg0, arg1)
}

// DeleteProducts mocks base method.
func (m *MockStore) DeleteProducts(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProducts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProducts indicates an expected call of DeleteProducts.
func (mr *MockStoreMockRecorder) DeleteProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProducts", reflect.TypeOf((*MockStore)(nil).DeleteProducts), arg0, arg1)
}

// GetALLCartitemsForUpdate mocks base method.
func (m *MockStore) GetALLCartitemsForUpdate(arg0 context.Context) ([]db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALLCartitemsForUpdate", arg0)
	ret0, _ := ret[0].([]db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALLCartitemsForUpdate indicates an expected call of GetALLCartitemsForUpdate.
func (mr *MockStoreMockRecorder) GetALLCartitemsForUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALLCartitemsForUpdate", reflect.TypeOf((*MockStore)(nil).GetALLCartitemsForUpdate), arg0)
}

// GetAllCartitems mocks base method.
func (m *MockStore) GetAllCartitems(arg0 context.Context) ([]db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCartitems", arg0)
	ret0, _ := ret[0].([]db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCartitems indicates an expected call of GetAllCartitems.
func (mr *MockStoreMockRecorder) GetAllCartitems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCartitems", reflect.TypeOf((*MockStore)(nil).GetAllCartitems), arg0)
}

// GetCartitem mocks base method.
func (m *MockStore) GetCartitem(arg0 context.Context, arg1 uuid.UUID) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartitem", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartitem indicates an expected call of GetCartitem.
func (mr *MockStoreMockRecorder) GetCartitem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartitem", reflect.TypeOf((*MockStore)(nil).GetCartitem), arg0, arg1)
}

// GetCartitemsByCartID mocks base method.
func (m *MockStore) GetCartitemsByCartID(arg0 context.Context, arg1 uuid.UUID) ([]db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartitemsByCartID", arg0, arg1)
	ret0, _ := ret[0].([]db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartitemsByCartID indicates an expected call of GetCartitemsByCartID.
func (mr *MockStoreMockRecorder) GetCartitemsByCartID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartitemsByCartID", reflect.TypeOf((*MockStore)(nil).GetCartitemsByCartID), arg0, arg1)
}

// GetCartitemsByProductID mocks base method.
func (m *MockStore) GetCartitemsByProductID(arg0 context.Context, arg1 uuid.UUID) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartitemsByProductID", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartitemsByProductID indicates an expected call of GetCartitemsByProductID.
func (mr *MockStoreMockRecorder) GetCartitemsByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartitemsByProductID", reflect.TypeOf((*MockStore)(nil).GetCartitemsByProductID), arg0, arg1)
}

// GetCartitemsForUpdate mocks base method.
func (m *MockStore) GetCartitemsForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartitemsForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartitemsForUpdate indicates an expected call of GetCartitemsForUpdate.
func (mr *MockStoreMockRecorder) GetCartitemsForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartitemsForUpdate", reflect.TypeOf((*MockStore)(nil).GetCartitemsForUpdate), arg0, arg1)
}

// GetCarts mocks base method.
func (m *MockStore) GetCarts(arg0 context.Context, arg1 uuid.UUID) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarts indicates an expected call of GetCarts.
func (mr *MockStoreMockRecorder) GetCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarts", reflect.TypeOf((*MockStore)(nil).GetCarts), arg0, arg1)
}

// GetCartsByUserID mocks base method.
func (m *MockStore) GetCartsByUserID(arg0 context.Context, arg1 uuid.UUID) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartsByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartsByUserID indicates an expected call of GetCartsByUserID.
func (mr *MockStoreMockRecorder) GetCartsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartsByUserID", reflect.TypeOf((*MockStore)(nil).GetCartsByUserID), arg0, arg1)
}

// GetCartsForUpdate mocks base method.
func (m *MockStore) GetCartsForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartsForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartsForUpdate indicates an expected call of GetCartsForUpdate.
func (mr *MockStoreMockRecorder) GetCartsForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartsForUpdate", reflect.TypeOf((*MockStore)(nil).GetCartsForUpdate), arg0, arg1)
}

// GetImages mocks base method.
func (m *MockStore) GetImages(arg0 context.Context, arg1 uuid.UUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockStoreMockRecorder) GetImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockStore)(nil).GetImages), arg0, arg1)
}

// GetOrderitemByOrderID mocks base method.
func (m *MockStore) GetOrderitemByOrderID(arg0 context.Context, arg1 uuid.UUID) (db.Orderitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemByOrderID", arg0, arg1)
	ret0, _ := ret[0].(db.Orderitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemByOrderID indicates an expected call of GetOrderitemByOrderID.
func (mr *MockStoreMockRecorder) GetOrderitemByOrderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemByOrderID", reflect.TypeOf((*MockStore)(nil).GetOrderitemByOrderID), arg0, arg1)
}

// GetOrderitems mocks base method.
func (m *MockStore) GetOrderitems(arg0 context.Context, arg1 uuid.UUID) (db.Orderitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitems", arg0, arg1)
	ret0, _ := ret[0].(db.Orderitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitems indicates an expected call of GetOrderitems.
func (mr *MockStoreMockRecorder) GetOrderitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitems", reflect.TypeOf((*MockStore)(nil).GetOrderitems), arg0, arg1)
}

// GetOrderitemsByOrderID mocks base method.
func (m *MockStore) GetOrderitemsByOrderID(arg0 context.Context, arg1 uuid.UUID) ([]db.Orderitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemsByOrderID", arg0, arg1)
	ret0, _ := ret[0].([]db.Orderitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemsByOrderID indicates an expected call of GetOrderitemsByOrderID.
func (mr *MockStoreMockRecorder) GetOrderitemsByOrderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemsByOrderID", reflect.TypeOf((*MockStore)(nil).GetOrderitemsByOrderID), arg0, arg1)
}

// GetOrderitemsForUpdate mocks base method.
func (m *MockStore) GetOrderitemsForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Orderitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderitemsForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Orderitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderitemsForUpdate indicates an expected call of GetOrderitemsForUpdate.
func (mr *MockStoreMockRecorder) GetOrderitemsForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderitemsForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrderitemsForUpdate), arg0, arg1)
}

// GetOrdersByID mocks base method.
func (m *MockStore) GetOrdersByID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByID indicates an expected call of GetOrdersByID.
func (mr *MockStoreMockRecorder) GetOrdersByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByID", reflect.TypeOf((*MockStore)(nil).GetOrdersByID), arg0, arg1)
}

// GetOrdersByUserID mocks base method.
func (m *MockStore) GetOrdersByUserID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockStoreMockRecorder) GetOrdersByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockStore)(nil).GetOrdersByUserID), arg0, arg1)
}

// GetOrdersForUpdate mocks base method.
func (m *MockStore) GetOrdersForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForUpdate indicates an expected call of GetOrdersForUpdate.
func (mr *MockStoreMockRecorder) GetOrdersForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForUpdate", reflect.TypeOf((*MockStore)(nil).GetOrdersForUpdate), arg0, arg1)
}

// GetPayment mocks base method.
func (m *MockStore) GetPayment(arg0 context.Context, arg1 string) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockStoreMockRecorder) GetPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockStore)(nil).GetPayment), arg0, arg1)
}

// GetPaymentsByUserID mocks base method.
func (m *MockStore) GetPaymentsByUserID(arg0 context.Context, arg1 uuid.UUID) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByUserID indicates an expected call of GetPaymentsByUserID.
func (mr *MockStoreMockRecorder) GetPaymentsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByUserID", reflect.TypeOf((*MockStore)(nil).GetPaymentsByUserID), arg0, arg1)
}

// GetProductForUpdate mocks base method.
func (m *MockStore) GetProductForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductForUpdate indicates an expected call of GetProductForUpdate.
func (mr *MockStoreMockRecorder) GetProductForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductForUpdate), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockStore) GetProducts(arg0 context.Context, arg1 uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockStoreMockRecorder) GetProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockStore)(nil).GetProducts), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// ListCartitems mocks base method.
func (m *MockStore) ListCartitems(arg0 context.Context, arg1 db.ListCartitemsParams) ([]db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartitems", arg0, arg1)
	ret0, _ := ret[0].([]db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartitems indicates an expected call of ListCartitems.
func (mr *MockStoreMockRecorder) ListCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartitems", reflect.TypeOf((*MockStore)(nil).ListCartitems), arg0, arg1)
}

// ListImages mocks base method.
func (m *MockStore) ListImages(arg0 context.Context, arg1 db.ListImagesParams) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockStoreMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockStore)(nil).ListImages), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// RemoveCartTx mocks base method.
func (m *MockStore) RemoveCartTx(arg0 context.Context, arg1, arg2 uuid.UUID) (db.RemoveCartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.RemoveCartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCartTx indicates an expected call of RemoveCartTx.
func (mr *MockStoreMockRecorder) RemoveCartTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartTx", reflect.TypeOf((*MockStore)(nil).RemoveCartTx), arg0, arg1, arg2)
}

// UpdateCartTx mocks base method.
func (m *MockStore) UpdateCartTx(arg0 context.Context, arg1 uuid.UUID, arg2 db.UpdateCartitemsParams) (db.CartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.CartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartTx indicates an expected call of UpdateCartTx.
func (mr *MockStoreMockRecorder) UpdateCartTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartTx", reflect.TypeOf((*MockStore)(nil).UpdateCartTx), arg0, arg1, arg2)
}

// UpdateCartitems mocks base method.
func (m *MockStore) UpdateCartitems(arg0 context.Context, arg1 db.UpdateCartitemsParams) (db.Cartitem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartitems", arg0, arg1)
	ret0, _ := ret[0].(db.Cartitem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartitems indicates an expected call of UpdateCartitems.
func (mr *MockStoreMockRecorder) UpdateCartitems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartitems", reflect.TypeOf((*MockStore)(nil).UpdateCartitems), arg0, arg1)
}

// UpdateCarts mocks base method.
func (m *MockStore) UpdateCarts(arg0 context.Context, arg1 db.UpdateCartsParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarts", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarts indicates an expected call of UpdateCarts.
func (mr *MockStoreMockRecorder) UpdateCarts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarts", reflect.TypeOf((*MockStore)(nil).UpdateCarts), arg0, arg1)
}

// UpdateOrders mocks base method.
func (m *MockStore) UpdateOrders(arg0 context.Context, arg1 db.UpdateOrdersParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockStoreMockRecorder) UpdateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockStore)(nil).UpdateOrders), arg0, arg1)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStore) UpdatePaymentStatus(arg0 context.Context, arg1 db.UpdatePaymentStatusParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStoreMockRecorder) UpdatePaymentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStore)(nil).UpdatePaymentStatus), arg0, arg1)
}

// UpdateProducts mocks base method.
func (m *MockStore) UpdateProducts(arg0 context.Context, arg1 db.UpdateProductsParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProducts", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockStoreMockRecorder) UpdateProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockStore)(nil).UpdateProducts), arg0, arg1)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrders = `-- name: CreateOrders :one
INSERT INTO orders (
  user_name, user_id, total_price, delivery_address, country, status
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, user_name, user_id, total_price, delivery_address, country, status, created_at
`

type CreateOrdersParams struct {
	UserName        string    `json:"user_name"`
	UserID          uuid.UUID `json:"user_id"`
	TotalPrice      float64   `json:"total_price"`
	DeliveryAddress string    `json:"delivery_address"`
	Country         string    `json:"country"`
	Status          string    `json:"status"`
}

func (q *Queries) CreateOrders(ctx context.Context, arg CreateOrdersParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrders,
		arg.UserName,
		arg.UserID,
		arg.TotalPrice,
		arg.DeliveryAddress,
		arg.Country,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserID,
		&i.TotalPrice,
		&i.DeliveryAddress,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersByID = `-- name: GetOrdersByID :one
SELECT id, user_name, user_id, total_price, delivery_address, country, status, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrdersByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrdersByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserID,
		&i.TotalPrice,
		&i.DeliveryAddress,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :one
SELECT id, user_name, user_id, total_price, delivery_address, country, status, created_at FROM orders
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrdersByUserID, userID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserID,
		&i.TotalPrice,
		&i.DeliveryAddress,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersForUpdate = `-- name: GetOrdersForUpdate :one
SELECT id, user_name, user_id, total_price, delivery_address, country, status, created_at FROM orders
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetOrdersForUpdate(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrdersForUpdate, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserID,
		&i.TotalPrice,
		&i.DeliveryAddress,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrders = `-- name: UpdateOrders :one
UPDATE orders
  set status = $2
WHERE id = $1
RETURNING id, user_name, user_id, total_price, delivery_address, country, status, created_at
`

type UpdateOrdersParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateOrders(ctx context.Context, arg UpdateOrdersParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrders, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserID,
		&i.TotalPrice,
		&i.DeliveryAddress,
		&i.Country,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

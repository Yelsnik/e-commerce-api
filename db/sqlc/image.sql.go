// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createImages = `-- name: CreateImages :one
INSERT INTO images (
  image_name,
  data,
  product
) VALUES (
  $1, $2, $3
) RETURNING id, image_name, data, product, created_at
`

type CreateImagesParams struct {
	ImageName string    `json:"image_name"`
	Data      []byte    `json:"data"`
	Product   uuid.UUID `json:"product"`
}

func (q *Queries) CreateImages(ctx context.Context, arg CreateImagesParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImages, arg.ImageName, arg.Data, arg.Product)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageName,
		&i.Data,
		&i.Product,
		&i.CreatedAt,
	)
	return i, err
}

const getImages = `-- name: GetImages :one
SELECT id, image_name, data, product, created_at FROM images
WHERE product = $1 LIMIT 1
`

func (q *Queries) GetImages(ctx context.Context, product uuid.UUID) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImages, product)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ImageName,
		&i.Data,
		&i.Product,
		&i.CreatedAt,
	)
	return i, err
}

const listImages = `-- name: ListImages :many
SELECT id, image_name, data, product, created_at FROM images
ORDER BY  id
LIMIT $1
OFFSET $2
`

type ListImagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListImages(ctx context.Context, arg ListImagesParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.ImageName,
			&i.Data,
			&i.Product,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cartItem.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCartitems = `-- name: CreateCartitems :one
INSERT INTO cartitems (
  cart, product, quantity, price, sub_total
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, cart, product, quantity, price, sub_total, created_at
`

type CreateCartitemsParams struct {
	Cart     uuid.UUID `json:"cart"`
	Product  uuid.UUID `json:"product"`
	Quantity int64     `json:"quantity"`
	Price    float64   `json:"price"`
	SubTotal float64   `json:"sub_total"`
}

func (q *Queries) CreateCartitems(ctx context.Context, arg CreateCartitemsParams) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, createCartitems,
		arg.Cart,
		arg.Product,
		arg.Quantity,
		arg.Price,
		arg.SubTotal,
	)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const getCartitems = `-- name: GetCartitems :one
SELECT id, cart, product, quantity, price, sub_total, created_at FROM cartitems
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCartitems(ctx context.Context, id uuid.UUID) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, getCartitems, id)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

const listCartitems = `-- name: ListCartitems :many
SELECT id, cart, product, quantity, price, sub_total, created_at FROM cartitems
ORDER BY  id
LIMIT $1
OFFSET $2
`

type ListCartitemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCartitems(ctx context.Context, arg ListCartitemsParams) ([]Cartitem, error) {
	rows, err := q.db.QueryContext(ctx, listCartitems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cartitem
	for rows.Next() {
		var i Cartitem
		if err := rows.Scan(
			&i.ID,
			&i.Cart,
			&i.Product,
			&i.Quantity,
			&i.Price,
			&i.SubTotal,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartitems = `-- name: UpdateCartitems :one
UPDATE cartitems
  set quantity = $2,
  price = $3,
  sub_total = $4
WHERE id = $1
RETURNING id, cart, product, quantity, price, sub_total, created_at
`

type UpdateCartitemsParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int64     `json:"quantity"`
	Price    float64   `json:"price"`
	SubTotal float64   `json:"sub_total"`
}

func (q *Queries) UpdateCartitems(ctx context.Context, arg UpdateCartitemsParams) (Cartitem, error) {
	row := q.db.QueryRowContext(ctx, updateCartitems,
		arg.ID,
		arg.Quantity,
		arg.Price,
		arg.SubTotal,
	)
	var i Cartitem
	err := row.Scan(
		&i.ID,
		&i.Cart,
		&i.Product,
		&i.Quantity,
		&i.Price,
		&i.SubTotal,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: password_reset-token.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (
  user_id, token, expires_at
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, token, expires_at, created_at
`

type CreatePasswordResetTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, user_id, token, expires_at, created_at FROM password_reset_tokens
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, id uuid.UUID) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, id)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPasswordResetTokenByToken = `-- name: GetPasswordResetTokenByToken :one
SELECT id, user_id, token, expires_at, created_at FROM password_reset_tokens
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetPasswordResetTokenByToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetTokenByToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

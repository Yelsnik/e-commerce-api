# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Run unit tests

on:
  push:
    branches: [ "main" ]


jobs:

  test:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
        # Label used to access the service container
        postgres:
          # Docker Hub image
          image: postgres
          # Provide the password for postgres
          env:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: mahanta
            POSTGRES_DB: e_commerce
          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            # Maps tcp port 5432 on service container to the host
            - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name:  Install golang-migrate
      run: |
        curl -L https://github.com/golang-migrate/migrate/releases/download/v4.12.2/migrate.linux-amd64.tar.gz  | tar xvz
        sudo mv migrate.linux-amd64 /usr/bin/migrate
        which migrate

    - name: Run migrations
      run: make migrateup
  
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'

    - name: Set up environment file
      run: |
        echo "DB_SOURCE=${{ secrets.DB_SOURCE}}" >> app.env
        echo "DB_DRIVER=${{ secrets.DB_DRIVER }}" >> app.env
        echo "SERVER_ADDRESS=${{ secrets.SERVER_ADDRESS }}" >> app.env
        echo "TOKEN_SYMMETRIC_KEY=${{ secrets.TOKEN_SYMMETRIC_KEY}}" >> app.env
        echo "ACCESS_TOKEN_DURATION=${{ secrets.ACCESS_TOKEN_DURATION }}" >> app.env
        echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> app.env
        echo "WEBHOOK_SIGNING_KEY=${{ secrets.WEBHOOK_SIGNING_KEY}}" >> app.env
        echo "EMAIL_SENDER_NAME=${{ secrets.EMAIL_SENDER_NAME }}" >> app.env
        echo "EMAIL_SENDER_ADDRESS=${{ secrets.EMAIL_SENDER_ADDRESS }}" >> app.env
        echo "EMAIL_SENDER_PASSWORD=${{ secrets.EMAIL_SENDER_PASSWORD }}" >> app.env
        echo "PASSWORD_RESET_TOKEN_DURATION=${{ secrets.PASSWORD_RESET_TOKEN_DURATION }}" >> app.env

    - name: Test
      run: make test
  
 
    

    
      
      
      